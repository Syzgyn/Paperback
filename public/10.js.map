{"version":3,"sources":["webpack:///./resources/js/Components/Page/PageRow.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorBadge.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEmptyItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorList.js","webpack:///./resources/js/Settings/SettingsMenuBar.js","webpack:///./resources/js/Settings/SettingsToolbar.js"],"names":["PageRow","props","className","children","propTypes","PropTypes","node","string","defaultProps","ConnectorAddModal","isOpen","toggleModal","onSchemaSelect","func","isRequired","bool","ConnectorAddModalContent","dispatch","useDispatch","useSelector","getLocation","pathname","fetchSchema","selector","indexerSchema","settingsIndexersSelector","downloaderSchema","settingsDownloadersSelector","isSchemaLoading","isSchemaPopulated","schema","useEffect","filter","item","protocol","map","name","ConnectorAddModalItem","selectSchema","indexerSelect","downloaderSelect","selectConnector","type","ConnectorBadge","text","enabled","color","undefined","ConnectorEditModal","formRef","React","createRef","fetchFunc","testFunc","saveFunc","deleteFunc","toggleModalFunc","fetchIndexers","testIndexer","submitIndexer","indexerToggleModal","fetchDownloaders","testDownloader","submitDownloader","downloaderToggleModal","selectedSchema","showEditModal","prepareData","data","Object","assign","current","values","id","onClickTest","onClickSave","console","log","url","method","axios","then","onClickDelete","existingConnector","shape","number","ConnectorEditModalContent","forwardRef","allSchema","find","fields","initialValues","field","label","displayName","object","ConnectorEmptyItem","state","addModal","toggleAddModal","bind","toggleEditModal","schemaSelected","setState","editModal","indexerDeselect","downloaderDeselect","Component","mapStateToProps","router","location","connect","ConnectorItem","settingsApiPathSelector","showItemFunc","indexerShowItem","downloaderShowItem","enableRss","enableSearch","enable","ConnectorList","items","array","SettingsMenuBar","links","to","link","index","SettingsToolbar","saveSettings","event","preventDefault","onSavePress"],"mappings":"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","file":"10.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorAddModalContent from \"./ConnectorAddModalContent\";\n\nconst ConnectorAddModal = (props) => (\n    <Modal\n        isOpen={props.isOpen}\n        toggle={props.toggleModal}\n        className=\"settingsItemModal\"\n        size=\"xl\"\n    >\n        <ModalHeader toggle={props.toggleModal}>\n            Add Connector\n        </ModalHeader>\n        <ModalBody>\n            <ConnectorAddModalContent\n                onSchemaSelect={props.onSchemaSelect}\n            />\n        </ModalBody>\n        <ModalFooter>\n            <Button color=\"secondary\" onClick={props.toggleModal}>\n                Close\n            </Button>\n        </ModalFooter>\n    </Modal>\n);\n\nConnectorAddModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModal;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectorAddModalItem from \"./ConnectorAddModalItem\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport { fetchSchema as indexerSchema, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\nimport { fetchSchema as downloaderSchema, settingsDownloadersSelector } from \"@/Store/Slices/Settings/downloaders\";\n\nconst ConnectorAddModalContent = (props) => {\n    const dispatch = useDispatch();\n    const { pathname } = useSelector(getLocation);\n    \n    let fetchSchema, selector;\n\n    if (pathname === \"/settings/indexers\") {\n        fetchSchema = indexerSchema;\n        selector = settingsIndexersSelector;\n    } else {\n        fetchSchema = downloaderSchema;\n        selector = settingsDownloadersSelector;\n    }\n\n    const { isSchemaLoading, isSchemaPopulated, schema } = useSelector(selector);\n\n    useEffect(() => {\n        dispatch(fetchSchema());\n    }, [dispatch, fetchSchema]);\n\n    if (isSchemaLoading || !isSchemaPopulated) {\n        return <LoadingIndicator />\n    }\n\n    //TODO: Update title from schema\n    return (\n        <>\n            <h2>Usenet</h2>\n            <div className=\"settings-item-list\">\n                {schema\n                    .filter((item) => {\n                        return item.protocol == \"usenet\";\n                    })\n                    .map((item) => (\n                        <ConnectorAddModalItem\n                            key={item.name}\n                            {...item}\n                            onSchemaSelect={props.onSchemaSelect}\n                        />\n                    ))}\n            </div>\n        </>\n    );\n}\n\nConnectorAddModalContent.propTypes = {\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSchema as indexerSelect } from \"@/Store/Slices/Settings/indexers\";\nimport { selectSchema as downloaderSelect } from \"@/Store/Slices/Settings/downloaders\";\nimport { getLocation } from \"connected-react-router\";\n\nconst ConnectorAddModalItem = (props) => {\n    const dispatch = useDispatch();\n    const { name } = props;\n    const { pathname } = useSelector(getLocation);\n\n    let selectSchema;\n\n    if (pathname === \"/settings/indexers\") {\n        selectSchema = indexerSelect;\n    } else {\n        selectSchema = downloaderSelect;\n    }\n\n\n    function selectConnector() {\n        dispatch(selectSchema(props.type));\n        props.onSchemaSelect();\n    }\n\n    return (\n        <Card\n            onClick={selectConnector}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n        </Card>\n    );\n}\n\nConnectorAddModalItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge } from \"reactstrap\";\n\nfunction ConnectorBadge(props) {\n    const { text, enabled } = props;\n\n    const color = enabled ? \"success\" : \"danger\";\n\n    if (enabled === undefined) {\n        return null;\n    }\n\n    return <Badge color={color}>{text}</Badge>;\n}\n\nConnectorBadge.propTypes = {\n    text: PropTypes.string.isRequired,\n    enabled: PropTypes.bool,\n};\n\nexport default ConnectorBadge;\n","import React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorEditModalContent from \"./ConnectorEditModalContent\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport { useDispatch, useSelector } from  \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport { toggleEditModal as indexerToggleModal, fetchIndexers, testIndexer, submitIndexer, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\nimport { toggleEditModal as downloaderToggleModal, fetchDownloaders, testDownloader, submitDownloader, settingsDownloadersSelector } from \"@/Store/Slices/Settings/downloaders\";\n\nconst ConnectorEditModal = (props) => {\n    const dispatch = useDispatch();\n    const formRef = React.createRef();\n    const { pathname } = useSelector(getLocation);\n\n    let fetchFunc, testFunc, saveFunc, deleteFunc, selector, toggleModalFunc;\n\n    if (pathname === \"/settings/indexers\") {\n        fetchFunc = fetchIndexers;\n        testFunc = testIndexer;\n        saveFunc = submitIndexer;\n        toggleModalFunc = indexerToggleModal;\n        selector = settingsIndexersSelector;\n    } else {\n        fetchFunc = fetchDownloaders;\n        testFunc = testDownloader;\n        saveFunc = submitDownloader;\n        toggleModalFunc = downloaderToggleModal;\n        selector = settingsDownloadersSelector;\n    }\n\n    const {selectedSchema, showEditModal } = useSelector(selector);\n\n    function prepareData() {\n        let data = Object.assign({}, formRef.current.values);\n        if (props.item !== undefined) {\n            data.type = props.item.schema.type;\n            data.id = props.item.id;\n        } else {\n            data.type = selectedSchema;\n        }\n\n        return data;\n    }\n\n    function onClickTest() {\n        let data = prepareData();\n        dispatch(testFunc(data));\n    }\n\n    function onClickSave() {\n        let data = prepareData();\n        console.log(dispatch(saveFunc(data)));\n        let { url } = props;\n        let method = \"post\";\n        const item = props.item;\n        if (item) {\n            url += \"/\" + item.id;\n            method = \"put\";\n        }\n\n        axios[method](url, data).then(() => {\n            toggleModal();\n            dispatch(fetchFunc());\n        });\n    }\n\n    function onClickDelete() {\n        axios\n            .delete(props.url + \"/\" + props.item.id)\n            .then(() => {\n                toggleModal();\n                dispatch(fetchFunc());\n            });\n    }\n\n    function toggleModal() {\n        dispatch(toggleModalFunc());\n    }\n\n    const { item } = props;\n\n    const name = item\n        ? item.schema.type\n        : selectedSchema\n        ? selectedSchema\n        : \"\";\n\n    return (\n        <Modal\n            isOpen={showEditModal}\n            toggle={toggleModal}\n            className=\"itemModal\"\n            size=\"xl\"\n        >\n            <ModalHeader toggle={props.toggleModal}>\n                {\"Edit - \" + name}\n            </ModalHeader>\n            <ModalBody>\n                <PageRow>\n                    <ConnectorEditModalContent\n                        item={item}\n                        toggleModal={toggleModal}\n                        ref={formRef}\n                    />\n                </PageRow>\n            </ModalBody>\n            <ModalFooter>\n                {item ? (\n                    <Button\n                        color=\"danger mr-auto\"\n                        onClick={onClickDelete}\n                    >\n                        Delete\n                    </Button>\n                ) : (\n                    <Button color=\"secondary mr-auto\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                )}\n\n                <Button color=\"secondary\" onClick={onClickTest}>\n                    Test\n                </Button>\n                <Button color=\"secondary\" onClick={toggleModal}>\n                    Cancel\n                </Button>\n                <Button color=\"primary\" onClick={onClickSave}>\n                    Save\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n\nConnectorEditModal.propTypes = {\n    url: PropTypes.string,\n    toggleModal: PropTypes.func,\n    isOpen: PropTypes.bool,\n    existingConnector: PropTypes.bool,\n    item: PropTypes.shape({\n        schema: PropTypes.shape({\n            type: PropTypes.string,\n        }),\n        id: PropTypes.number,\n    }),\n    dispatch: PropTypes.func,\n};\n\nexport default ConnectorEditModal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormGroup, Label } from \"reactstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport { settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\nimport { settingsDownloadersSelector } from \"@/Store/Slices/Settings/downloaders\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\n\nconst ConnectorEditModalContent = React.forwardRef((props, formRef) => {\n    const { item } = props;\n    const { pathname } = useSelector(getLocation);\n\n    let selector;\n\n    if (pathname === \"/settings/indexers\") {\n        selector = settingsIndexersSelector;\n    } else {\n        selector = settingsDownloadersSelector;\n    }\n\n    const{ schema:allSchema, selectedSchema } = useSelector(selector);\n\n    let schema = null;\n    if (item) {\n        schema = item.schema;\n    } else {\n        schema = allSchema.find(item => item.type === selectedSchema )\n    }\n\n    if (!schema) {\n        return <LoadingIndicator />\n    }\n\n    const { fields, initialValues } = schema;\n\n    return (\n        <Formik initialValues={initialValues} innerRef={formRef}>\n            <Form id=\"editForm\" className=\"horizontal-form\">\n                {fields.map((field) => (\n                    <FormGroup className=\"row\" key={field.name}>\n                        <Label className=\"col-sm-3\">{field.label}</Label>\n                        <div className=\"col-sm-5\">\n                            <Field\n                                type={field.type}\n                                name={field.name}\n                                className=\"form-control\"\n                            />\n                            <ErrorMessage name={field.name} />\n                        </div>\n                    </FormGroup>\n                ))}\n            </Form>\n        </Formik>\n    );\n});\n\nConnectorEditModalContent.displayName = \"ConnectorEditModalContent\";\n\nConnectorEditModalContent.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default ConnectorEditModalContent;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"reactstrap\";\nimport { Plus } from \"react-feather\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorAddModal from \"./ConnectorAddModal\";\nimport { connect } from \"react-redux\";\nimport { deselectSchema as indexerDeselect } from \"@/Store/Slices/Settings/indexers\";\nimport { deselectSchema as downloaderDeselect } from \"@/Store/Slices/Settings/downloaders\";\n\nclass ConnectorEmptyItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            addModal: false,\n        };\n\n        this.toggleAddModal = this.toggleAddModal.bind(this);\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.schemaSelected = this.schemaSelected.bind(this);\n    }\n\n    toggleAddModal() {\n        this.setState({ addModal: !this.state.addModal });\n    }\n\n    toggleEditModal() {\n        this.setState({ editModal: !this.state.editModal });\n\n        if (this.props.pathname === \"/settings/indexers\") {\n            this.props.dispatch(indexerDeselect());\n        } else {\n            this.props.dispatch(downloaderDeselect());\n        }\n    }\n\n    schemaSelected() {\n        this.setState({addModal: false, editModal: true});\n    }\n\n    render() {\n        const { addModal, editModal } = this.state;\n\n        return (\n            <Card\n                onClick={this.toggleAddModal}\n                className=\"settings-connector-item add-item shadow p-3 m-3 text-center\"\n            >\n                <Plus size={60} />\n                <ConnectorAddModal\n                    isOpen={addModal}\n                    toggleModal={this.toggleAddModal}\n                    onSchemaSelect={this.schemaSelected}\n                />\n                <ConnectorEditModal\n                    isOpen={editModal}\n                    toggleModal={this.toggleEditModal}\n                    existingConnector={false}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorEmptyItem.propTypes = {\n    url: PropTypes.string,\n    dispatch: PropTypes.func,\n    pathname: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  pathname: state.router.location.pathname,\n})\n\nexport default connect(mapStateToProps)(ConnectorEmptyItem);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle, CardText } from \"reactstrap\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorBadge from \"./ConnectorBadge\";\nimport { showItem as indexerShowItem } from \"@/Store/Slices/Settings/indexers\";\nimport { showItem as downloaderShowItem } from \"@/Store/Slices/Settings/downloaders\";\nimport { useDispatch, useSelector } from  \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport {settingsApiPathSelector} from \"@/Store/Selectors/settingsApiPath\";\n\nconst ConnectorItem = ({item}) => { \n    const dispatch = useDispatch();\n    const {pathname} = useSelector(getLocation);\n    console.log(useSelector(settingsApiPathSelector));\n    let showItemFunc;\n\n    if (pathname === \"/settings/indexers\") {\n        showItemFunc = indexerShowItem;\n    } else {\n        showItemFunc = downloaderShowItem;\n    }\n\n    function toggleEditModal() {\n        dispatch(showItemFunc(item));\n    }\n\n    const { name, enableRss, enableSearch, enable } = item;\n\n    return (\n        <Card\n            onClick={toggleEditModal}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n            <CardText className=\"mt-2\">\n                <ConnectorBadge enabled={enableRss} text=\"RSS\" />\n                <ConnectorBadge enabled={enableSearch} text=\"Search\" />\n                <ConnectorBadge enabled={enable} text=\"Enabled\" />\n            </CardText>\n        </Card>\n    );\n}\n\nConnectorItem.propTypes = {\n    url: PropTypes.string,\n    item: PropTypes.object.isRequired,\n};\n\nexport default ConnectorItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ConnectorItem from \"./ConnectorItem\";\nimport ConnectorEmptyItem from \"./ConnectorEmptyItem\";\n\nconst ConnectorList = ({items, url}) => ( \n    <PageRow className=\"settings-connector-list\">\n        {items.map((item) => (\n            <ConnectorItem\n                key={item.id}\n                item={item}\n                url={url}\n            />\n        ))}\n        <ConnectorEmptyItem\n            url={url}\n        />\n    </PageRow>\n)\n\nConnectorList.propTypes = {\n    items: PropTypes.array.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default ConnectorList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PageRow from \"@/Components/Page/PageRow\";\n\nfunction SettingsMenuBar() {\n    const links = [\n        {\n            to: \"/settings/general\",\n            text: \"General\",\n        },\n        {\n            to: \"/settings/indexers\",\n            text: \"Indexers\",\n        },\n        {\n            to: \"/settings/downloaders\",\n            text: \"Download Clients\",\n        },\n    ];\n\n    return (\n        <PageRow className=\"mb-3\">\n            <ul className=\"nav nav-tabs\">\n                {links.map((link, index) => (\n                    <li key={index} className=\"nav-item\">\n                        <NavLink to={link.to} className=\"nav-link\">\n                            {link.text}\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </PageRow>\n    );\n}\n\nSettingsMenuBar.propTypes = {};\n\nexport default SettingsMenuBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nclass SettingsToolbar extends Component {\n    constructor() {\n        super();\n        this.saveSettings = this.saveSettings.bind(this);\n    }\n\n    saveSettings(event) {\n        event.preventDefault();\n\n        const { onSavePress } = this.props;\n\n        onSavePress();\n    }\n\n    render() {\n        const { onSavePress } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-1 offset-11\">\n                    <Button onClick={onSavePress}>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nSettingsToolbar.propTypes = {\n    onSavePress: PropTypes.func.isRequired,\n};\n\nexport default SettingsToolbar;\n"],"sourceRoot":""}