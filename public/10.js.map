{"version":3,"sources":["webpack:///./resources/js/Components/Page/PageRow.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorBadge.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEmptyItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorList.js","webpack:///./resources/js/Settings/SettingsMenuBar.js","webpack:///./resources/js/Settings/SettingsToolbar.js"],"names":["PageRow","props","className","children","propTypes","PropTypes","node","string","defaultProps","ConnectorAddModal","isOpen","toggleModal","onSchemaSelect","func","isRequired","bool","ConnectorAddModalContent","dispatch","useDispatch","useSelector","getLocation","pathname","fetchSchema","selector","indexerSchema","settingsIndexersSelector","downloaderSchema","settingsDownloadersSelector","isSchemaLoading","isSchemaPopulated","schema","useEffect","filter","item","protocol","map","name","ConnectorAddModalItem","selectSchema","indexerSelect","downloaderSelect","selectConnector","type","ConnectorBadge","text","enabled","color","undefined","ConnectorEditModal","formRef","React","createRef","fetchFunc","fetchIndexers","fetchDownloaders","selectedSchema","prepareData","data","Object","assign","current","values","id","onClickTest","axios","post","url","then","response","result","onClickSave","method","onClickDelete","existingConnector","shape","number","ConnectorEditModalContent","forwardRef","allSchema","find","fields","initialValues","field","label","displayName","object","ConnectorEmptyItem","state","addModal","toggleAddModal","bind","toggleEditModal","schemaSelected","setState","editModal","indexerDeselect","downloaderDeselect","Component","mapStateToProps","router","location","connect","ConnectorItem","modal","enableRss","enableSearch","enable","ConnectorList","items","array","SettingsMenuBar","links","to","link","index","SettingsToolbar","saveSettings","event","preventDefault","onSavePress"],"mappings":"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","file":"10.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorAddModalContent from \"./ConnectorAddModalContent\";\n\nconst ConnectorAddModal = (props) => (\n    <Modal\n        isOpen={props.isOpen}\n        toggle={props.toggleModal}\n        className=\"settingsItemModal\"\n        size=\"xl\"\n    >\n        <ModalHeader toggle={props.toggleModal}>\n            Add Connector\n        </ModalHeader>\n        <ModalBody>\n            <ConnectorAddModalContent\n                onSchemaSelect={props.onSchemaSelect}\n            />\n        </ModalBody>\n        <ModalFooter>\n            <Button color=\"secondary\" onClick={props.toggleModal}>\n                Close\n            </Button>\n        </ModalFooter>\n    </Modal>\n);\n\nConnectorAddModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModal;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectorAddModalItem from \"./ConnectorAddModalItem\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport { fetchSchema as indexerSchema, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\nimport { fetchSchema as downloaderSchema, settingsDownloadersSelector } from \"@/Store/Slices/Settings/downloaders\";\n\nconst ConnectorAddModalContent = (props) => {\n    const dispatch = useDispatch();\n    const { pathname } = useSelector(getLocation);\n    \n    let fetchSchema, selector;\n\n    if (pathname === \"/settings/indexers\") {\n        fetchSchema = indexerSchema;\n        selector = settingsIndexersSelector;\n    } else {\n        fetchSchema = downloaderSchema;\n        selector = settingsDownloadersSelector;\n    }\n\n    const { isSchemaLoading, isSchemaPopulated, schema } = useSelector(selector);\n\n    useEffect(() => {\n        dispatch(fetchSchema());\n    }, [dispatch, fetchSchema]);\n\n    if (isSchemaLoading || !isSchemaPopulated) {\n        return <LoadingIndicator />\n    }\n\n    //TODO: Update title from schema\n    return (\n        <>\n            <h2>Usenet</h2>\n            <div className=\"settings-item-list\">\n                {schema\n                    .filter((item) => {\n                        return item.protocol == \"usenet\";\n                    })\n                    .map((item) => (\n                        <ConnectorAddModalItem\n                            key={item.name}\n                            {...item}\n                            onSchemaSelect={props.onSchemaSelect}\n                        />\n                    ))}\n            </div>\n        </>\n    );\n}\n\nConnectorAddModalContent.propTypes = {\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectSchema as indexerSelect } from \"@/Store/Slices/Settings/indexers\";\nimport { selectSchema as downloaderSelect } from \"@/Store/Slices/Settings/downloaders\";\nimport { getLocation } from \"connected-react-router\";\n\nconst ConnectorAddModalItem = (props) => {\n    const dispatch = useDispatch();\n    const { name } = props;\n    const { pathname } = useSelector(getLocation);\n\n    let selectSchema;\n\n    if (pathname === \"/settings/indexers\") {\n        selectSchema = indexerSelect;\n    } else {\n        selectSchema = downloaderSelect;\n    }\n\n\n    function selectConnector() {\n        dispatch(selectSchema(props.type));\n        props.onSchemaSelect();\n    }\n\n    return (\n        <Card\n            onClick={selectConnector}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n        </Card>\n    );\n}\n\nConnectorAddModalItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge } from \"reactstrap\";\n\nfunction ConnectorBadge(props) {\n    const { text, enabled } = props;\n\n    const color = enabled ? \"success\" : \"danger\";\n\n    if (enabled === undefined) {\n        return null;\n    }\n\n    return <Badge color={color}>{text}</Badge>;\n}\n\nConnectorBadge.propTypes = {\n    text: PropTypes.string.isRequired,\n    enabled: PropTypes.bool,\n};\n\nexport default ConnectorBadge;\n","import React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorEditModalContent from \"./ConnectorEditModalContent\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport { useDispatch, useSelector } from  \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport { fetchIndexers, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\nimport { fetchDownloaders, settingsDownloadersSelector } from \"@/Store/Slices/Settings/downloaders\";\n\nconst ConnectorEditModal = (props) => {\n    const dispatch = useDispatch();\n    const formRef = React.createRef();\n    const { pathname } = useSelector(getLocation);\n\n    let fetchFunc, selector;\n\n    if (pathname === \"/settings/indexers\") {\n        fetchFunc = fetchIndexers;\n        selector = settingsIndexersSelector;\n    } else {\n        fetchFunc = fetchDownloaders;\n        selector = settingsDownloadersSelector;\n    }\n\n    const selectedSchema = useSelector(selector);\n\n    function prepareData() {\n        let data = Object.assign({}, formRef.current.values);\n        if (props.item !== undefined) {\n            data.type = props.item.schema.type;\n            data.id = props.item.id;\n        } else {\n            data.type = selectedSchema;\n        }\n\n        return data;\n    }\n\n    function onClickTest() {\n        let data = prepareData();\n        axios.post(props.url + \"/test\", data).then((response) => {\n            if (response.data.result) {\n                //setState({ testSuccess: true });\n            }\n        });\n    }\n\n    function onClickSave() {\n        let data = prepareData();\n        let { url } = props;\n        let method = \"post\";\n        const item = props.item;\n        if (item) {\n            url += \"/\" + item.id;\n            method = \"put\";\n        }\n\n        axios[method](url, data).then(() => {\n            props.toggleModal();\n            dispatch(fetchFunc());\n        });\n    }\n\n    function onClickDelete() {\n        axios\n            .delete(props.url + \"/\" + props.item.id)\n            .then(() => {\n                props.toggleModal();\n                dispatch(fetchFunc());\n            });\n    }\n\n    const { toggleModal, item } = props;\n\n    const name = item\n        ? item.schema.type\n        : selectedSchema\n        ? selectedSchema\n        : \"\";\n\n    return (\n        <Modal\n            isOpen={props.isOpen}\n            toggle={toggleModal}\n            className=\"itemModal\"\n            size=\"xl\"\n        >\n            <ModalHeader toggle={props.toggleModal}>\n                {\"Edit - \" + name}\n            </ModalHeader>\n            <ModalBody>\n                <PageRow>\n                    <ConnectorEditModalContent\n                        item={item}\n                        toggleModal={toggleModal}\n                        ref={formRef}\n                    />\n                </PageRow>\n            </ModalBody>\n            <ModalFooter>\n                {item ? (\n                    <Button\n                        color=\"danger mr-auto\"\n                        onClick={onClickDelete}\n                    >\n                        Delete\n                    </Button>\n                ) : (\n                    <Button color=\"secondary mr-auto\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                )}\n\n                <Button color=\"secondary\" onClick={onClickTest}>\n                    Test\n                </Button>\n                <Button color=\"secondary\" onClick={toggleModal}>\n                    Cancel\n                </Button>\n                <Button color=\"primary\" onClick={onClickSave}>\n                    Save\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n\nConnectorEditModal.propTypes = {\n    url: PropTypes.string,\n    toggleModal: PropTypes.func,\n    isOpen: PropTypes.bool,\n    existingConnector: PropTypes.bool,\n    item: PropTypes.shape({\n        schema: PropTypes.shape({\n            type: PropTypes.string,\n        }),\n        id: PropTypes.number,\n    }),\n    dispatch: PropTypes.func,\n};\n\nexport default ConnectorEditModal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormGroup, Label } from \"reactstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { getLocation } from \"connected-react-router\";\nimport { settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\nimport { settingsDownloadersSelector } from \"@/Store/Slices/Settings/downloaders\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\n\nconst ConnectorEditModalContent = React.forwardRef((props, formRef) => {\n    const { item } = props;\n    const { pathname } = useSelector(getLocation);\n\n    let selector;\n\n    if (pathname === \"/settings/indexers\") {\n        selector = settingsIndexersSelector;\n    } else {\n        selector = settingsDownloadersSelector;\n    }\n\n    const{ schema:allSchema, selectedSchema } = useSelector(selector);\n\n    let schema = null;\n    if (item) {\n        schema = item.schema;\n    } else {\n        schema = allSchema.find(item => item.type === selectedSchema )\n    }\n\n    if (!schema) {\n        return <LoadingIndicator />\n    }\n\n    const { fields, initialValues } = schema;\n\n    return (\n        <Formik initialValues={initialValues} innerRef={formRef}>\n            <Form id=\"editForm\" className=\"horizontal-form\">\n                {fields.map((field) => (\n                    <FormGroup className=\"row\" key={field.name}>\n                        <Label className=\"col-sm-3\">{field.label}</Label>\n                        <div className=\"col-sm-5\">\n                            <Field\n                                type={field.type}\n                                name={field.name}\n                                className=\"form-control\"\n                            />\n                            <ErrorMessage name={field.name} />\n                        </div>\n                    </FormGroup>\n                ))}\n            </Form>\n        </Formik>\n    );\n});\n\nConnectorEditModalContent.displayName = \"ConnectorEditModalContent\";\n\nConnectorEditModalContent.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default ConnectorEditModalContent;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"reactstrap\";\nimport { Plus } from \"react-feather\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorAddModal from \"./ConnectorAddModal\";\nimport { connect } from \"react-redux\";\nimport { deselectSchema as indexerDeselect } from \"@/Store/Slices/Settings/indexers\";\nimport { deselectSchema as downloaderDeselect } from \"@/Store/Slices/Settings/downloaders\";\n\nclass ConnectorEmptyItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            addModal: false,\n        };\n\n        this.toggleAddModal = this.toggleAddModal.bind(this);\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.schemaSelected = this.schemaSelected.bind(this);\n    }\n\n    toggleAddModal() {\n        this.setState({ addModal: !this.state.addModal });\n    }\n\n    toggleEditModal() {\n        this.setState({ editModal: !this.state.editModal });\n\n        if (this.props.pathname === \"/settings/indexers\") {\n            this.props.dispatch(indexerDeselect());\n        } else {\n            this.props.dispatch(downloaderDeselect());\n        }\n    }\n\n    schemaSelected() {\n        this.setState({addModal: false, editModal: true});\n    }\n\n    render() {\n        const { addModal, editModal } = this.state;\n\n        return (\n            <Card\n                onClick={this.toggleAddModal}\n                className=\"settings-connector-item add-item shadow p-3 m-3 text-center\"\n            >\n                <Plus size={60} />\n                <ConnectorAddModal\n                    isOpen={addModal}\n                    toggleModal={this.toggleAddModal}\n                    onSchemaSelect={this.schemaSelected}\n                />\n                <ConnectorEditModal\n                    isOpen={editModal}\n                    toggleModal={this.toggleEditModal}\n                    existingConnector={false}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorEmptyItem.propTypes = {\n    url: PropTypes.string,\n    dispatch: PropTypes.func,\n    pathname: PropTypes.string,\n};\n\nconst mapStateToProps = state => ({\n  pathname: state.router.location.pathname,\n})\n\nexport default connect(mapStateToProps)(ConnectorEmptyItem);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle, CardText } from \"reactstrap\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorBadge from \"./ConnectorBadge\";\n\nclass ConnectorItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            modal: false,\n        };\n\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n    }\n\n    toggleEditModal() {\n        this.setState({ modal: !this.state.modal});\n    }\n\n    render() {\n        const { modal } = this.state;\n\n        const { name, enableRss, enableSearch, enable } = this.props.item;\n\n        return (\n            <Card\n                onClick={this.toggleEditModal}\n                className=\"settings-connector-item shadow p-3 m-3\"\n            >\n                <CardTitle>{name}</CardTitle>\n                <CardText className=\"mt-2\">\n                    <ConnectorBadge enabled={enableRss} text=\"RSS\" />\n                    <ConnectorBadge enabled={enableSearch} text=\"Search\" />\n                    <ConnectorBadge enabled={enable} text=\"Enabled\" />\n                </CardText>\n                <ConnectorEditModal\n                    isOpen={modal}\n                    toggleModal={this.toggleEditModal}\n                    item={this.props.item}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorItem.propTypes = {\n    url: PropTypes.string,\n    item: PropTypes.object.isRequired,\n};\n\nexport default ConnectorItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ConnectorItem from \"./ConnectorItem\";\nimport ConnectorEmptyItem from \"./ConnectorEmptyItem\";\n\nconst ConnectorList = ({items, url}) => ( \n    <PageRow className=\"settings-connector-list\">\n        {items.map((item) => (\n            <ConnectorItem\n                key={item.id}\n                item={item}\n                url={url}\n            />\n        ))}\n        <ConnectorEmptyItem\n            url={url}\n        />\n    </PageRow>\n)\n\nConnectorList.propTypes = {\n    items: PropTypes.array.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default ConnectorList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PageRow from \"@/Components/Page/PageRow\";\n\nfunction SettingsMenuBar() {\n    const links = [\n        {\n            to: \"/settings/general\",\n            text: \"General\",\n        },\n        {\n            to: \"/settings/indexers\",\n            text: \"Indexers\",\n        },\n        {\n            to: \"/settings/downloaders\",\n            text: \"Download Clients\",\n        },\n    ];\n\n    return (\n        <PageRow className=\"mb-3\">\n            <ul className=\"nav nav-tabs\">\n                {links.map((link, index) => (\n                    <li key={index} className=\"nav-item\">\n                        <NavLink to={link.to} className=\"nav-link\">\n                            {link.text}\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </PageRow>\n    );\n}\n\nSettingsMenuBar.propTypes = {};\n\nexport default SettingsMenuBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nclass SettingsToolbar extends Component {\n    constructor() {\n        super();\n        this.saveSettings = this.saveSettings.bind(this);\n    }\n\n    saveSettings(event) {\n        event.preventDefault();\n\n        const { onSavePress } = this.props;\n\n        onSavePress();\n    }\n\n    render() {\n        const { onSavePress } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-1 offset-11\">\n                    <Button onClick={onSavePress}>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nSettingsToolbar.propTypes = {\n    onSavePress: PropTypes.func.isRequired,\n};\n\nexport default SettingsToolbar;\n"],"sourceRoot":""}