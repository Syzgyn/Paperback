{"version":3,"sources":["webpack:///./resources/js/AddComic/Import/ImportComics/ImportComicFooter.js","webpack:///./resources/js/AddComic/Import/ImportComics/ImportComicRow.js","webpack:///./resources/js/AddComic/Import/ImportComics/ImportComicSearchResults.js","webpack:///./resources/js/AddComic/Import/ImportComics/ImportComicTable.js","webpack:///./resources/js/AddComic/Import/ImportComics/ImportComics.js","webpack:///./resources/js/Components/Page/PageRow.js"],"names":["ImportComicFooter","props","dispatch","useDispatch","count","useSelector","importComicsCheckedCountSelector","importComics","e","preventDefault","importSelectedDirs","checkedCount","propTypes","PropTypes","number","ImportTableRow","toggleChecked","toggleCheckbox","id","changeMonitor","setMonitored","monitored","target","value","checked","items","length","name","comicCount","array","bool","string","ImportComicSearchResults","selector","importComicsItemSelectorFactory","isLoading","isPopulated","useEffect","fetchSearchResults","changeMatch","setMatchId","matchId","map","item","cvid","startYear","numIssues","publisher","ImportComicTable","match","folderId","params","importComicsSelector","fetchItems","onMasterChange","setAllChecked","index","object","withRouter","Import","PageRow","className","children","node","defaultProps"],"mappings":"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","file":"6.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    importSelectedDirs,\n    importComicsCheckedCountSelector,\n} from \"@/Store/Slices/importComics\";\n\nconst ImportComicFooter = (props) => {\n    const dispatch = useDispatch();\n    const count = useSelector(importComicsCheckedCountSelector);\n\n    function importComics(e) {\n        e.preventDefault();\n        dispatch(importSelectedDirs());\n    }\n\n    return (\n        <div>\n            <button\n                disabled={props.checkedCount == 0}\n                className=\"btn btn-primary\"\n                onClick={importComics}\n            >\n                Import {count} Comics\n            </button>\n        </div>\n    );\n};\n\nImportComicFooter.propTypes = {\n    checkedCount: PropTypes.number,\n};\n\nexport default ImportComicFooter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ImportComicSearchResults from \"@/AddComic/Import/ImportComics/ImportComicSearchResults\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleCheckbox, setMonitored } from \"@/Store/Slices/importComics\";\n\nconst ImportTableRow = (props) => {\n    const dispatch = useDispatch();\n\n    function toggleChecked() {\n        dispatch(toggleCheckbox(props.id));\n    }\n\n    function changeMonitor(e) {\n        dispatch(setMonitored({ id: props.id, monitored: e.target.value }));\n    }\n\n    return (\n        <tr>\n            <td>\n                <input\n                    type=\"checkbox\"\n                    checked={props.checked}\n                    disabled={props.items.length == 0}\n                    onChange={toggleChecked}\n                />\n            </td>\n            <td>{props.name}</td>\n            <td>{props.comicCount}</td>\n            <td>\n                <select\n                    defaultValue=\"all\"\n                    className=\"custom-select\"\n                    onChange={changeMonitor}\n                >\n                    <option value=\"all\">All Issues</option>\n                    <option value=\"future\">Future Issues</option>\n                    <option value=\"missing\">Missing Issues</option>\n                    <option value=\"existing\">Existing Issues</option>\n                    <option value=\"none\">None</option>\n                </select>\n            </td>\n            <td>\n                <ImportComicSearchResults id={props.id} />\n            </td>\n        </tr>\n    );\n};\n\nImportTableRow.propTypes = {\n    id: PropTypes.number,\n    items: PropTypes.array,\n    checked: PropTypes.bool,\n    name: PropTypes.string,\n    comicCount: PropTypes.number,\n};\n\nexport default ImportTableRow;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n    importComicsItemSelectorFactory,\n    fetchSearchResults,\n    setMatchId,\n} from \"@/Store/Slices/importComics\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst ImportComicSearchResults = (props) => {\n    const dispatch = useDispatch();\n    const selector = importComicsItemSelectorFactory(props.id);\n    const { isLoading, isPopulated, items } = useSelector(selector);\n\n    useEffect(() => {\n        dispatch(fetchSearchResults(props.id));\n    }, [dispatch, props.id]);\n\n    function changeMatch(e) {\n        dispatch(setMatchId({ id: props.id, matchId: e.target.value }));\n    }\n\n    //TODO: Replace with more dynamic dropdown (search, extended limits, etc)\n    return (\n        <select\n            className=\"custom-select\"\n            defaultValue=\"temp\"\n            onChange={changeMatch}\n        >\n            {isLoading ? (\n                <option disabled value=\"temp\">\n                    Loading...\n                </option>\n            ) : null}\n            {isPopulated && items.length == 0 ? (\n                <option disabled value=\"temp\">\n                    No Matches Found\n                </option>\n            ) : null}\n            {items.map((item) => (\n                <option key={item.cvid} value={item.cvid}>\n                    {item.name +\n                        \" (\" +\n                        item.startYear +\n                        \") [\" +\n                        item.numIssues +\n                        \" issues] [\" +\n                        item.publisher +\n                        \"]\"}\n                </option>\n            ))}\n        </select>\n    );\n};\n\nImportComicSearchResults.propTypes = {\n    id: PropTypes.number,\n};\n\nexport default ImportComicSearchResults;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\nimport ImportComicRow from \"@/AddComic/Import/ImportComics/ImportComicRow\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    fetchItems,\n    importComicsSelector,\n    setAllChecked,\n} from \"@/Store/Slices/importComics\";\nimport { withRouter } from \"react-router-dom\";\n\nconst ImportComicTable = ({ match }) => {\n    const dispatch = useDispatch();\n    const folderId = match.params.folderId;\n    const { isLoading, items } = useSelector(importComicsSelector);\n\n    useEffect(() => {\n        dispatch(fetchItems(folderId));\n    }, [dispatch, folderId]);\n\n    function onMasterChange(e) {\n        const checked = e.target.checked;\n        dispatch(setAllChecked(checked));\n    }\n\n    if (isLoading) {\n        return <LoadingIndicator />;\n    }\n\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th>\n                        <input\n                            type=\"checkbox\"\n                            defaultChecked={true}\n                            onChange={onMasterChange}\n                        />\n                    </th>\n                    <th>Folder</th>\n                    <th>Issue Count</th>\n                    <th>Monitor</th>\n                    <th>Series</th>\n                </tr>\n            </thead>\n            <tbody>\n                {items.map((item, index) => (\n                    <ImportComicRow key={index} id={index} {...item} />\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nImportComicTable.propTypes = {\n    match: PropTypes.object,\n};\n\nexport default withRouter(ImportComicTable);\n","import React from \"react\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ImportComicTable from \"@/AddComic/Import/ImportComics/ImportComicTable\";\nimport ImportComicFooter from \"@/AddComic/Import/ImportComics/ImportComicFooter\";\n\nconst Import = () => {\n    return (\n        <PageRow>\n            <form>\n                <ImportComicTable />\n                <ImportComicFooter />\n            </form>\n        </PageRow>\n    );\n};\n\nexport default Import;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n"],"sourceRoot":""}