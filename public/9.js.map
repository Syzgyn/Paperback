{"version":3,"sources":["webpack:///./resources/js/Components/Page/PageRow.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorBadge.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEmptyItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorList.js","webpack:///./resources/js/Settings/SettingsMenuBar.js","webpack:///./resources/js/Settings/SettingsToolbar.js"],"names":["PageRow","props","className","children","propTypes","PropTypes","node","string","defaultProps","ConnectorAddModal","isOpen","toggleModal","onSchemaSelect","func","isRequired","bool","ConnectorAddModalContent","dispatch","useDispatch","useSelector","settingsIndexersSelector","isSchemaLoading","isSchemaPopulated","schema","useEffect","fetchSchema","filter","item","protocol","map","name","ConnectorAddModalItem","selectConnector","selectSchema","type","ConnectorBadge","text","enabled","color","undefined","ConnectorEditModal","formRef","React","createRef","selectedSchema","prepareData","data","Object","assign","current","values","id","onClickTest","axios","post","url","then","response","result","onClickSave","method","fetchIndexers","onClickDelete","existingConnector","shape","number","ConnectorEmptyItem","state","addModal","toggleAddModal","bind","toggleEditModal","schemaSelected","setState","editModal","pathname","indexerDeselect","downloaderDeselect","Component","mapStateToProps","router","location","connect","ConnectorItem","modal","enableRss","enableSearch","enable","object","ConnectorList","items","array","SettingsMenuBar","links","to","link","index","SettingsToolbar","saveSettings","event","preventDefault","onSavePress"],"mappings":"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","file":"9.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorAddModalContent from \"./ConnectorAddModalContent\";\n\nconst ConnectorAddModal = (props) => (\n    <Modal\n        isOpen={props.isOpen}\n        toggle={props.toggleModal}\n        className=\"settingsItemModal\"\n        size=\"xl\"\n    >\n        <ModalHeader toggle={props.toggleModal}>\n            Add Connector\n        </ModalHeader>\n        <ModalBody>\n            <ConnectorAddModalContent\n                onSchemaSelect={props.onSchemaSelect}\n            />\n        </ModalBody>\n        <ModalFooter>\n            <Button color=\"secondary\" onClick={props.toggleModal}>\n                Close\n            </Button>\n        </ModalFooter>\n    </Modal>\n);\n\nConnectorAddModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModal;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectorAddModalItem from \"./ConnectorAddModalItem\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSchema, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\n\nconst ConnectorAddModalContent = (props) => {\n    const dispatch = useDispatch();\n    const { isSchemaLoading, isSchemaPopulated, schema } = useSelector(settingsIndexersSelector);\n\n    useEffect(() => {\n        dispatch(fetchSchema());\n    }, [dispatch]);\n\n    if (isSchemaLoading || !isSchemaPopulated) {\n        return <LoadingIndicator />\n    }\n\n    //TODO: Update title from schema\n    return (\n        <>\n            <h2>Usenet</h2>\n            <div className=\"settings-item-list\">\n                {schema\n                    .filter((item) => {\n                        return item.protocol == \"usenet\";\n                    })\n                    .map((item) => (\n                        <ConnectorAddModalItem\n                            key={item.name}\n                            {...item}\n                            onSchemaSelect={props.onSchemaSelect}\n                        />\n                    ))}\n            </div>\n        </>\n    );\n}\n\nConnectorAddModalContent.propTypes = {\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle } from \"reactstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { selectSchema } from \"@/Store/Slices/Settings/indexers\";\n\nconst ConnectorAddModalItem = (props) => {\n    const dispatch = useDispatch();\n    const { name } = props;\n\n    function selectConnector() {\n        dispatch(selectSchema(props.type));\n        props.onSchemaSelect();\n    }\n\n    return (\n        <Card\n            onClick={selectConnector}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n        </Card>\n    );\n}\n\nConnectorAddModalItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge } from \"reactstrap\";\n\nfunction ConnectorBadge(props) {\n    const { text, enabled } = props;\n\n    const color = enabled ? \"success\" : \"danger\";\n\n    if (enabled === undefined) {\n        return null;\n    }\n\n    return <Badge color={color}>{text}</Badge>;\n}\n\nConnectorBadge.propTypes = {\n    text: PropTypes.string.isRequired,\n    enabled: PropTypes.bool,\n};\n\nexport default ConnectorBadge;\n","import React from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorEditModalContent from \"./ConnectorEditModalContent\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport { useDispatch, useSelector } from  \"react-redux\";\nimport { fetchIndexers, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\n\nconst ConnectorEditModal = (props) => {\n    const dispatch = useDispatch();\n    const formRef = React.createRef();\n    const {selectedSchema} = useSelector(settingsIndexersSelector);\n\n    function prepareData() {\n        let data = Object.assign({}, formRef.current.values);\n        if (props.item !== undefined) {\n            data.type = props.item.schema.type;\n            data.id = props.item.id;\n        } else {\n            data.type = selectedSchema;\n        }\n\n        return data;\n    }\n\n    function onClickTest() {\n        let data = prepareData();\n        axios.post(props.url + \"/test\", data).then((response) => {\n            if (response.data.result) {\n                //setState({ testSuccess: true });\n            }\n        });\n    }\n\n    function onClickSave() {\n        let data = prepareData();\n        let { url } = props;\n        let method = \"post\";\n        const item = props.item;\n        if (item) {\n            url += \"/\" + item.id;\n            method = \"put\";\n        }\n\n        axios[method](url, data).then(() => {\n            props.toggleModal();\n            dispatch(fetchIndexers());\n        });\n    }\n\n    function onClickDelete() {\n        axios\n            .delete(props.url + \"/\" + props.item.id)\n            .then(() => {\n                props.toggleModal();\n                dispatch(fetchIndexers());\n            });\n    }\n\n    const { toggleModal, item } = props;\n\n    const name = item\n        ? item.schema.type\n        : selectedSchema\n        ? selectedSchema\n        : \"\";\n\n    return (\n        <Modal\n            isOpen={props.isOpen}\n            toggle={toggleModal}\n            className=\"itemModal\"\n            size=\"xl\"\n        >\n            <ModalHeader toggle={props.toggleModal}>\n                {\"Edit - \" + name}\n            </ModalHeader>\n            <ModalBody>\n                <PageRow>\n                    <ConnectorEditModalContent\n                        item={item}\n                        toggleModal={toggleModal}\n                        ref={formRef}\n                    />\n                </PageRow>\n            </ModalBody>\n            <ModalFooter>\n                {item ? (\n                    <Button\n                        color=\"danger mr-auto\"\n                        onClick={onClickDelete}\n                    >\n                        Delete\n                    </Button>\n                ) : (\n                    <Button color=\"secondary mr-auto\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                )}\n\n                <Button color=\"secondary\" onClick={onClickTest}>\n                    Test\n                </Button>\n                <Button color=\"secondary\" onClick={toggleModal}>\n                    Cancel\n                </Button>\n                <Button color=\"primary\" onClick={onClickSave}>\n                    Save\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n}\n\nConnectorEditModal.propTypes = {\n    url: PropTypes.string,\n    toggleModal: PropTypes.func,\n    isOpen: PropTypes.bool,\n    existingConnector: PropTypes.bool,\n    item: PropTypes.shape({\n        schema: PropTypes.shape({\n            type: PropTypes.string,\n        }),\n        id: PropTypes.number,\n    }),\n    dispatch: PropTypes.func,\n};\n\nexport default ConnectorEditModal;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"reactstrap\";\nimport { Plus } from \"react-feather\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorAddModal from \"./ConnectorAddModal\";\nimport { connect } from \"react-redux\";\nimport { deselectSchema as indexerDeselect } from \"@/Store/Slices/Settings/indexers\";\nimport { deselectSchema as downloaderDeselect } from \"@/Store/Slices/Settings/downloaders\";\n\nclass ConnectorEmptyItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            addModal: false,\n        };\n\n        this.toggleAddModal = this.toggleAddModal.bind(this);\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.schemaSelected = this.schemaSelected.bind(this);\n    }\n\n    toggleAddModal() {\n        this.setState({ addModal: !this.state.addModal });\n    }\n\n    toggleEditModal() {\n        this.setState({ editModal: !this.state.editModal });\n\n        if (this.props.pathname === \"/settings/indexers\") {\n            this.props.dispatch(indexerDeselect());\n        } else {\n            this.props.dispatch(downloaderDeselect());\n        }\n    }\n\n    schemaSelected() {\n        this.setState({addModal: false, editModal: true});\n    }\n\n    render() {\n        const { addModal, editModal } = this.state;\n\n        return (\n            <Card\n                onClick={this.toggleAddModal}\n                className=\"settings-connector-item add-item shadow p-3 m-3 text-center\"\n            >\n                <Plus size={60} />\n                <ConnectorAddModal\n                    isOpen={addModal}\n                    toggleModal={this.toggleAddModal}\n                    onSchemaSelect={this.schemaSelected}\n                />\n                <ConnectorEditModal\n                    isOpen={editModal}\n                    toggleModal={this.toggleEditModal}\n                    existingConnector={false}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorEmptyItem.propTypes = {\n    url: PropTypes.string,\n    dispatch: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  pathname: state.router.location.pathname,\n})\n\nexport default connect(mapStateToProps)(ConnectorEmptyItem);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle, CardText } from \"reactstrap\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorBadge from \"./ConnectorBadge\";\n\nclass ConnectorItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            modal: false,\n        };\n\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n    }\n\n    toggleEditModal() {\n        this.setState({ modal: !this.state.modal});\n    }\n\n    render() {\n        const { modal } = this.state;\n\n        const { name, enableRss, enableSearch, enable } = this.props.item;\n\n        return (\n            <Card\n                onClick={this.toggleEditModal}\n                className=\"settings-connector-item shadow p-3 m-3\"\n            >\n                <CardTitle>{name}</CardTitle>\n                <CardText className=\"mt-2\">\n                    <ConnectorBadge enabled={enableRss} text=\"RSS\" />\n                    <ConnectorBadge enabled={enableSearch} text=\"Search\" />\n                    <ConnectorBadge enabled={enable} text=\"Enabled\" />\n                </CardText>\n                <ConnectorEditModal\n                    isOpen={modal}\n                    toggleModal={this.toggleEditModal}\n                    item={this.props.item}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorItem.propTypes = {\n    url: PropTypes.string,\n    item: PropTypes.object.isRequired,\n};\n\nexport default ConnectorItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ConnectorItem from \"./ConnectorItem\";\nimport ConnectorEmptyItem from \"./ConnectorEmptyItem\";\n\nconst ConnectorList = ({items, url}) => ( \n    <PageRow className=\"settings-connector-list\">\n        {items.map((item) => (\n            <ConnectorItem\n                key={item.id}\n                item={item}\n                url={url}\n            />\n        ))}\n        <ConnectorEmptyItem\n            url={url}\n        />\n    </PageRow>\n)\n\nConnectorList.propTypes = {\n    items: PropTypes.array.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default ConnectorList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PageRow from \"@/Components/Page/PageRow\";\n\nfunction SettingsMenuBar() {\n    const links = [\n        {\n            to: \"/settings/general\",\n            text: \"General\",\n        },\n        {\n            to: \"/settings/indexers\",\n            text: \"Indexers\",\n        },\n        {\n            to: \"/settings/downloaders\",\n            text: \"Download Clients\",\n        },\n    ];\n\n    return (\n        <PageRow className=\"mb-3\">\n            <ul className=\"nav nav-tabs\">\n                {links.map((link, index) => (\n                    <li key={index} className=\"nav-item\">\n                        <NavLink to={link.to} className=\"nav-link\">\n                            {link.text}\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </PageRow>\n    );\n}\n\nSettingsMenuBar.propTypes = {};\n\nexport default SettingsMenuBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nclass SettingsToolbar extends Component {\n    constructor() {\n        super();\n        this.saveSettings = this.saveSettings.bind(this);\n    }\n\n    saveSettings(event) {\n        event.preventDefault();\n\n        const { onSavePress } = this.props;\n\n        onSavePress();\n    }\n\n    render() {\n        const { onSavePress } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-1 offset-11\">\n                    <Button onClick={onSavePress}>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nSettingsToolbar.propTypes = {\n    onSavePress: PropTypes.func.isRequired,\n};\n\nexport default SettingsToolbar;\n"],"sourceRoot":""}