{"version":3,"sources":["webpack:///./resources/js/Components/Page/PageRow.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorBadge.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEmptyItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorList.js","webpack:///./resources/js/Settings/SettingsMenuBar.js","webpack:///./resources/js/Settings/SettingsToolbar.js"],"names":["PageRow","props","className","children","propTypes","PropTypes","node","string","defaultProps","ConnectorAddModal","isOpen","toggleModal","schema","onModalClose","Component","func","isRequired","bool","array","ConnectorAddModalContent","onConnectorSelect","bind","modelType","filter","item","protocol","map","name","ConnectorAddModalItem","selectConnector","type","ConnectorBadge","text","enabled","color","undefined","ConnectorEmptyItem","state","addModal","implementation","toggleAddModal","toggleEditModal","openAddModal","onAddModalClosed","onEditModalClosed","setState","refresh","dispatch","fetchIndexers","editModal","itemSelected","find","length","axios","get","url","then","response","data","connect","ConnectorItem","openEditModal","enableRss","enableSearch","enable","object","ConnectorList","items","id","SettingsMenuBar","links","to","link","index","SettingsToolbar","saveSettings","event","preventDefault","onSavePress"],"mappings":"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","file":"9.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorAddModalContent from \"./ConnectorAddModalContent\";\n\nclass ConnectorAddModal extends Component {\n    render() {\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                toggle={this.props.toggleModal}\n                className=\"settingsItemModal\"\n                size=\"xl\"\n            >\n                <ModalHeader toggle={this.props.toggleModal}>\n                    Add Connector\n                </ModalHeader>\n                <ModalBody>\n                    <ConnectorAddModalContent\n                        schema={this.props.schema}\n                        onModalClose={this.props.onModalClose}\n                    />\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={this.props.toggleModal}>\n                        Close\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nConnectorAddModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    schema: PropTypes.array.isRequired,\n    onModalClose: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModal;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectorAddModalItem from \"./ConnectorAddModalItem\";\n\nclass ConnectorAddModalContent extends Component {\n    constructor() {\n        super();\n        this.onConnectorSelect = this.onConnectorSelect.bind(this);\n    }\n\n    onConnectorSelect(modelType) {\n        this.props.onModalClose(true, modelType);\n    }\n\n    render() {\n        const { schema } = this.props;\n\n        return (\n            <>\n                <h2>Usenet</h2>\n                <div className=\"settings-item-list\">\n                    {schema\n                        .filter((item) => {\n                            return item.protocol == \"usenet\";\n                        })\n                        .map((item) => (\n                            <ConnectorAddModalItem\n                                key={item.name}\n                                {...item}\n                                onConnectorSelect={this.onConnectorSelect}\n                            />\n                        ))}\n                </div>\n            </>\n        );\n    }\n}\n\nConnectorAddModalContent.propTypes = {\n    schema: PropTypes.array.isRequired,\n    onModalClose: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalContent;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle } from \"reactstrap\";\n\nclass ConnectorAddModalItem extends Component {\n    constructor() {\n        super();\n\n        this.selectConnector = this.selectConnector.bind(this);\n    }\n\n    selectConnector() {\n        this.props.onConnectorSelect(this.props.type);\n    }\n\n    render() {\n        const { name } = this.props;\n\n        return (\n            <Card\n                onClick={this.selectConnector}\n                className=\"settings-connector-item shadow p-3 m-3\"\n            >\n                <CardTitle>{name}</CardTitle>\n            </Card>\n        );\n    }\n}\n\nConnectorAddModalItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    onConnectorSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge } from \"reactstrap\";\n\nfunction ConnectorBadge(props) {\n    const { text, enabled } = props;\n\n    const color = enabled ? \"success\" : \"danger\";\n\n    if (enabled === undefined) {\n        return null;\n    }\n\n    return <Badge color={color}>{text}</Badge>;\n}\n\nConnectorBadge.propTypes = {\n    text: PropTypes.string.isRequired,\n    enabled: PropTypes.bool,\n};\n\nexport default ConnectorBadge;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { Card } from \"reactstrap\";\nimport { Plus } from \"react-feather\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorAddModal from \"./ConnectorAddModal\";\nimport { connect } from \"react-redux\";\nimport { fetchIndexers } from \"@/Store/Slices/Settings/indexers\";\n\nclass ConnectorEmptyItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            addModal: false,\n            schema: [],\n            implementation: null,\n        };\n\n        this.toggleAddModal = this.toggleAddModal.bind(this);\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.openAddModal = this.openAddModal.bind(this);\n        this.onAddModalClosed = this.onAddModalClosed.bind(this);\n        this.onEditModalClosed = this.onEditModalClosed.bind(this);\n    }\n\n    toggleAddModal() {\n        this.setState({ addModal: !this.state.addModal });\n    }\n\n    toggleEditModal(refresh) {\n        if (refresh) {\n            this.props.dispatch(fetchIndexers());\n        }\n\n        this.setState({ editModal: !this.state.editModal });\n    }\n\n    onAddModalClosed(itemSelected = false, modelType = null) {\n        this.setState({\n            addModal: false,\n            editModal: itemSelected,\n            implementation: this.state.schema.find(\n                (item) => item.type === modelType\n            ),\n        });\n    }\n\n    onEditModalClosed() {\n        this.setState({ editModal: false });\n    }\n\n    openAddModal() {\n        if (!this.state.schema.length) {\n            axios.get(this.props.url + \"/schema\").then((response) => {\n                this.setState({ schema: response.data }, this.toggleAddModal());\n            });\n        } else {\n            this.toggleAddModal();\n        }\n    }\n\n    render() {\n        const { addModal, editModal, implementation, schema } = this.state;\n\n        return (\n            <Card\n                onClick={this.openAddModal}\n                className=\"settings-connector-item add-item shadow p-3 m-3 text-center\"\n            >\n                <Plus size={60} />\n                <ConnectorAddModal\n                    isOpen={addModal}\n                    toggleModal={this.toggleAddModal}\n                    schema={schema}\n                    onModalClose={this.onAddModalClosed}\n                    url={this.props.url}\n                />\n                <ConnectorEditModal\n                    isOpen={editModal}\n                    toggleModal={this.toggleEditModal}\n                    implementation={implementation}\n                    existingConnector={false}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorEmptyItem.propTypes = {\n    url: PropTypes.string,\n    dispatch: PropTypes.func,\n};\n\nexport default connect()(ConnectorEmptyItem);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle, CardText } from \"reactstrap\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorBadge from \"./ConnectorBadge\";\nimport { connect } from \"react-redux\";\nimport { fetchIndexers } from \"@/Store/Slices/Settings/indexers\";\n\nclass ConnectorItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            editModal: false,\n            schema: {},\n        };\n\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.openEditModal = this.openEditModal.bind(this);\n        this.onEditModalClosed = this.onEditModalClosed.bind(this);\n    }\n\n    toggleEditModal(refresh = false) {\n        if (refresh) {\n            this.props.dispatch(fetchIndexers());\n        }\n\n        this.setState({ editModal: !this.state.editModal });\n    }\n\n    onEditModalClosed() {\n        this.setState({ editModal: false });\n    }\n\n    openEditModal() {\n        this.toggleEditModal();\n    }\n\n    render() {\n        const { editModal } = this.state;\n\n        const { name, enableRss, enableSearch, enable } = this.props.item;\n\n        return (\n            <Card\n                onClick={this.openEditModal}\n                className=\"settings-connector-item shadow p-3 m-3\"\n            >\n                <CardTitle>{name}</CardTitle>\n                <CardText className=\"mt-2\">\n                    <ConnectorBadge enabled={enableRss} text=\"RSS\" />\n                    <ConnectorBadge enabled={enableSearch} text=\"Search\" />\n                    <ConnectorBadge enabled={enable} text=\"Enabled\" />\n                </CardText>\n                <ConnectorEditModal\n                    isOpen={editModal}\n                    toggleModal={this.toggleEditModal}\n                    item={this.props.item}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorItem.propTypes = {\n    url: PropTypes.string,\n    item: PropTypes.object.isRequired,\n    dispatch: PropTypes.func,\n};\n\nexport default connect()(ConnectorItem);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ConnectorItem from \"./ConnectorItem\";\nimport ConnectorEmptyItem from \"./ConnectorEmptyItem\";\n\nconst ConnectorList = ({items, url}) => ( \n    <PageRow className=\"settings-connector-list\">\n        {items.map((item) => (\n            <ConnectorItem\n                key={item.id}\n                item={item}\n                url={url}\n            />\n        ))}\n        <ConnectorEmptyItem\n            url={url}\n        />\n    </PageRow>\n)\n\nConnectorList.propTypes = {\n    items: PropTypes.array.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default ConnectorList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PageRow from \"@/Components/Page/PageRow\";\n\nfunction SettingsMenuBar() {\n    const links = [\n        {\n            to: \"/settings/general\",\n            text: \"General\",\n        },\n        {\n            to: \"/settings/indexers\",\n            text: \"Indexers\",\n        },\n        {\n            to: \"/settings/downloaders\",\n            text: \"Download Clients\",\n        },\n    ];\n\n    return (\n        <PageRow className=\"mb-3\">\n            <ul className=\"nav nav-tabs\">\n                {links.map((link, index) => (\n                    <li key={index} className=\"nav-item\">\n                        <NavLink to={link.to} className=\"nav-link\">\n                            {link.text}\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </PageRow>\n    );\n}\n\nSettingsMenuBar.propTypes = {};\n\nexport default SettingsMenuBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nclass SettingsToolbar extends Component {\n    constructor() {\n        super();\n        this.saveSettings = this.saveSettings.bind(this);\n    }\n\n    saveSettings(event) {\n        event.preventDefault();\n\n        const { onSavePress } = this.props;\n\n        onSavePress();\n    }\n\n    render() {\n        const { onSavePress } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-1 offset-11\">\n                    <Button onClick={onSavePress}>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nSettingsToolbar.propTypes = {\n    onSavePress: PropTypes.func.isRequired,\n};\n\nexport default SettingsToolbar;\n"],"sourceRoot":""}