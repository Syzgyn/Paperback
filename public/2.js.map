{"version":3,"sources":["webpack:///./resources/js/Components/Page/PageRow.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorBadge.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEmptyItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorList.js","webpack:///./resources/js/Settings/SettingsMenuBar.js","webpack:///./resources/js/Settings/SettingsToolbar.js"],"names":["PageRow","props","className","children","propTypes","PropTypes","node","string","defaultProps","ConnectorAddModal","dispatch","useDispatch","useSelector","settingsItemsSelector","showAddModal","toggle","toggleAddModal","ConnectorAddModalContent","isSchemaLoading","isSchemaPopulated","schema","useEffect","fetchSchema","filter","item","protocol","map","name","ConnectorAddModalItem","selectConnector","selectSchemaAndToggleEditModal","type","onSchemaSelect","func","isRequired","ConnectorBadge","text","enabled","color","undefined","bool","ConnectorEditModal","formRef","React","createRef","selectedItem","selectedSchema","showEditModal","prepareData","data","Object","assign","current","values","id","onClickTest","testItem","onClickSave","console","log","submitItem","onClickDelete","deleteItem","toggleModal","toggleEditModal","ConnectorEditModalContent","forwardRef","allSchema","find","fields","initialValues","field","label","displayName","object","ConnectorEmptyItem","ConnectorItem","showItem","enableRss","enableSearch","enable","url","ConnectorList","items","array","SettingsMenuBar","links","to","link","index","SettingsToolbar","saveSettings","bind","event","preventDefault","onSavePress","Component"],"mappings":"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","file":"2.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n","import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorAddModalContent from \"./ConnectorAddModalContent\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    toggleAddModal,\n    settingsItemsSelector,\n} from \"@/Store/Slices/Settings/settingsConnectors\";\n\nconst ConnectorAddModal = () => {\n    const dispatch = useDispatch();\n    const { showAddModal } = useSelector(settingsItemsSelector);\n\n    function toggle() {\n        dispatch(toggleAddModal());\n    }\n\n    return (\n        <Modal\n            isOpen={showAddModal}\n            toggle={toggle}\n            className=\"settingsItemModal\"\n            size=\"xl\"\n        >\n            <ModalHeader toggle={toggle}>Add Connector</ModalHeader>\n            <ModalBody>\n                <ConnectorAddModalContent />\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"secondary\" onClick={toggle}>\n                    Close\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nexport default ConnectorAddModal;\n","import React, { useEffect } from \"react\";\nimport ConnectorAddModalItem from \"./ConnectorAddModalItem\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    fetchSchema,\n    settingsItemsSelector,\n} from \"@/Store/Slices/Settings/settingsConnectors\";\n\nconst ConnectorAddModalContent = () => {\n    const dispatch = useDispatch();\n    const { isSchemaLoading, isSchemaPopulated, schema } = useSelector(\n        settingsItemsSelector\n    );\n\n    useEffect(() => {\n        dispatch(fetchSchema());\n    }, [dispatch]);\n\n    if (isSchemaLoading || !isSchemaPopulated) {\n        return <LoadingIndicator />;\n    }\n\n    //TODO: Update title from schema\n    return (\n        <>\n            <h2>Usenet</h2>\n            <div className=\"settings-item-list\">\n                {schema\n                    .filter((item) => {\n                        return item.protocol == \"usenet\";\n                    })\n                    .map((item) => (\n                        <ConnectorAddModalItem key={item.name} {...item} />\n                    ))}\n            </div>\n        </>\n    );\n};\n\nexport default ConnectorAddModalContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle } from \"reactstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { selectSchemaAndToggleEditModal } from \"@/Store/Slices/Settings/settingsConnectors\";\n\nconst ConnectorAddModalItem = (props) => {\n    const dispatch = useDispatch();\n    const { name } = props;\n\n    function selectConnector() {\n        dispatch(selectSchemaAndToggleEditModal(props.type));\n    }\n\n    return (\n        <Card\n            onClick={selectConnector}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n        </Card>\n    );\n};\n\nConnectorAddModalItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge } from \"reactstrap\";\n\nfunction ConnectorBadge(props) {\n    const { text, enabled } = props;\n\n    const color = enabled ? \"success\" : \"danger\";\n\n    if (enabled === undefined) {\n        return null;\n    }\n\n    return <Badge color={color}>{text}</Badge>;\n}\n\nConnectorBadge.propTypes = {\n    text: PropTypes.string.isRequired,\n    enabled: PropTypes.bool,\n};\n\nexport default ConnectorBadge;\n","import React from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorEditModalContent from \"./ConnectorEditModalContent\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    toggleEditModal,\n    testItem,\n    submitItem,\n    deleteItem,\n    settingsItemsSelector,\n} from \"@/Store/Slices/Settings/settingsConnectors\";\n\nconst ConnectorEditModal = () => {\n    const dispatch = useDispatch();\n    const formRef = React.createRef();\n    const { selectedItem, selectedSchema, showEditModal } = useSelector(\n        settingsItemsSelector\n    );\n\n    function prepareData() {\n        let data = Object.assign({}, formRef.current.values);\n        if (selectedItem !== null) {\n            data.type = selectedItem.schema.type;\n            data.id = selectedItem.id;\n        } else {\n            data.type = selectedSchema;\n        }\n\n        return data;\n    }\n\n    function onClickTest() {\n        let data = prepareData();\n        dispatch(testItem(data));\n    }\n\n    function onClickSave() {\n        let data = prepareData();\n        console.log(dispatch(submitItem(data)));\n    }\n\n    function onClickDelete() {\n        dispatch(deleteItem(selectedItem.id));\n    }\n\n    function toggleModal() {\n        dispatch(toggleEditModal());\n    }\n\n    const name = selectedItem\n        ? selectedItem.schema.type\n        : selectedSchema\n        ? selectedSchema\n        : \"\";\n\n    return (\n        <Modal\n            isOpen={showEditModal}\n            toggle={toggleModal}\n            className=\"itemModal\"\n            size=\"xl\"\n        >\n            <ModalHeader toggle={toggleModal}>{\"Edit - \" + name}</ModalHeader>\n            <ModalBody>\n                <PageRow>\n                    <ConnectorEditModalContent\n                        item={selectedItem}\n                        toggleModal={toggleModal}\n                        ref={formRef}\n                    />\n                </PageRow>\n            </ModalBody>\n            <ModalFooter>\n                {selectedItem ? (\n                    <Button color=\"danger mr-auto\" onClick={onClickDelete}>\n                        Delete\n                    </Button>\n                ) : (\n                    <Button color=\"secondary mr-auto\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                )}\n\n                <Button color=\"secondary\" onClick={onClickTest}>\n                    Test\n                </Button>\n                <Button color=\"secondary\" onClick={toggleModal}>\n                    Cancel\n                </Button>\n                <Button color=\"primary\" onClick={onClickSave}>\n                    Save\n                </Button>\n            </ModalFooter>\n        </Modal>\n    );\n};\n\nConnectorEditModal.propTypes = {};\n\nexport default ConnectorEditModal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormGroup, Label } from \"reactstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { settingsItemsSelector } from \"@/Store/Slices/Settings/settingsConnectors\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\n\nconst ConnectorEditModalContent = React.forwardRef((props, formRef) => {\n    const { item } = props;\n\n    const { schema: allSchema, selectedSchema } = useSelector(\n        settingsItemsSelector\n    );\n\n    let schema = null;\n    if (item) {\n        schema = item.schema;\n    } else {\n        schema = allSchema.find((item) => item.type === selectedSchema);\n    }\n\n    if (!schema) {\n        return <LoadingIndicator />;\n    }\n\n    const { fields, initialValues } = schema;\n\n    return (\n        <Formik initialValues={initialValues} innerRef={formRef}>\n            <Form id=\"editForm\" className=\"horizontal-form\">\n                {fields.map((field) => (\n                    <FormGroup className=\"row\" key={field.name}>\n                        <Label className=\"col-sm-3\">{field.label}</Label>\n                        <div className=\"col-sm-5\">\n                            <Field\n                                type={field.type}\n                                name={field.name}\n                                className=\"form-control\"\n                            />\n                            <ErrorMessage name={field.name} />\n                        </div>\n                    </FormGroup>\n                ))}\n            </Form>\n        </Formik>\n    );\n});\n\nConnectorEditModalContent.displayName = \"ConnectorEditModalContent\";\n\nConnectorEditModalContent.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default ConnectorEditModalContent;\n","import React from \"react\";\nimport { Card } from \"reactstrap\";\nimport { Plus } from \"react-feather\";\nimport { useDispatch } from \"react-redux\";\nimport { toggleAddModal } from \"@/Store/Slices/Settings/settingsConnectors\";\n\nconst ConnectorEmptyItem = () => {\n    const dispatch = useDispatch();\n\n    function toggle() {\n        dispatch(toggleAddModal());\n    }\n\n    return (\n        <Card\n            onClick={toggle}\n            className=\"settings-connector-item add-item shadow p-3 m-3 text-center\"\n        >\n            <Plus size={60} />\n        </Card>\n    );\n};\n\nexport default ConnectorEmptyItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle, CardText } from \"reactstrap\";\nimport ConnectorBadge from \"./ConnectorBadge\";\nimport { showItem } from \"@/Store/Slices/Settings/settingsConnectors\";\nimport { useDispatch } from \"react-redux\";\n\nconst ConnectorItem = ({ item }) => {\n    const dispatch = useDispatch();\n\n    function toggleEditModal() {\n        dispatch(showItem(item));\n    }\n\n    const { name, enableRss, enableSearch, enable } = item;\n\n    return (\n        <Card\n            onClick={toggleEditModal}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n            <CardText className=\"mt-2\">\n                <ConnectorBadge enabled={enableRss} text=\"RSS\" />\n                <ConnectorBadge enabled={enableSearch} text=\"Search\" />\n                <ConnectorBadge enabled={enable} text=\"Enabled\" />\n            </CardText>\n        </Card>\n    );\n};\n\nConnectorItem.propTypes = {\n    url: PropTypes.string,\n    item: PropTypes.object.isRequired,\n};\n\nexport default ConnectorItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ConnectorItem from \"./ConnectorItem\";\nimport ConnectorEmptyItem from \"./ConnectorEmptyItem\";\nimport ConnectorAddModal from \"@/Components/SettingsConnectors/ConnectorAddModal\";\nimport ConnectorEditModal from \"@/Components/SettingsConnectors/ConnectorEditModal\";\n\nconst ConnectorList = ({ items, url }) => (\n    <PageRow className=\"settings-connector-list\">\n        {items.map((item) => (\n            <ConnectorItem key={item.id} item={item} url={url} />\n        ))}\n        <ConnectorEmptyItem url={url} />\n        <ConnectorAddModal />\n        <ConnectorEditModal />\n    </PageRow>\n);\n\nConnectorList.propTypes = {\n    items: PropTypes.array.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default ConnectorList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PageRow from \"@/Components/Page/PageRow\";\n\nfunction SettingsMenuBar() {\n    const links = [\n        {\n            to: \"/settings/general\",\n            text: \"General\",\n        },\n        {\n            to: \"/settings/indexers\",\n            text: \"Indexers\",\n        },\n        {\n            to: \"/settings/downloaders\",\n            text: \"Download Clients\",\n        },\n    ];\n\n    return (\n        <PageRow className=\"mb-3\">\n            <ul className=\"nav nav-tabs\">\n                {links.map((link, index) => (\n                    <li key={index} className=\"nav-item\">\n                        <NavLink to={link.to} className=\"nav-link\">\n                            {link.text}\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </PageRow>\n    );\n}\n\nSettingsMenuBar.propTypes = {};\n\nexport default SettingsMenuBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nclass SettingsToolbar extends Component {\n    constructor() {\n        super();\n        this.saveSettings = this.saveSettings.bind(this);\n    }\n\n    saveSettings(event) {\n        event.preventDefault();\n\n        const { onSavePress } = this.props;\n\n        onSavePress();\n    }\n\n    render() {\n        const { onSavePress } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-1 offset-11\">\n                    <Button onClick={onSavePress}>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nSettingsToolbar.propTypes = {\n    onSavePress: PropTypes.func.isRequired,\n};\n\nexport default SettingsToolbar;\n"],"sourceRoot":""}