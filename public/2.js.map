{"version":3,"sources":["webpack:///./resources/js/Components/Page/PageRow.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorAddModalItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorBadge.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModal.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEditModalContent.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorEmptyItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorItem.js","webpack:///./resources/js/Components/SettingsConnectors/ConnectorList.js","webpack:///./resources/js/Settings/SettingsMenuBar.js","webpack:///./resources/js/Settings/SettingsToolbar.js"],"names":["PageRow","props","className","children","propTypes","PropTypes","node","string","defaultProps","ConnectorAddModal","isOpen","toggleModal","onSchemaSelect","func","isRequired","bool","ConnectorAddModalContent","dispatch","useDispatch","useSelector","settingsIndexersSelector","isSchemaLoading","isSchemaPopulated","schema","useEffect","fetchSchema","filter","item","protocol","map","name","ConnectorAddModalItem","selectConnector","selectSchema","type","ConnectorBadge","text","enabled","color","undefined","ConnectorEditModal","state","testSuccess","formRef","React","createRef","onClickTest","bind","onClickSave","onClickDelete","data","current","values","implementation","setState","prepareData","axios","post","url","then","response","result","method","id","fetchIndexers","Component","object","existingConnector","shape","number","connect","ConnectorEditModalContent","forwardRef","allSchema","selectedSchema","find","fields","initialValues","field","label","displayName","ConnectorEmptyItem","addModal","toggleAddModal","toggleEditModal","schemaSelected","onEditModalClosed","refresh","editModal","deselectSchema","ConnectorItem","modal","openEditModal","enableRss","enableSearch","enable","ConnectorList","items","array","SettingsMenuBar","links","to","link","index","SettingsToolbar","saveSettings","event","preventDefault","onSavePress"],"mappings":"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","file":"2.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction PageRow(props) {\n    const { className } = props;\n\n    return (\n        <div className={\"row \" + className}>\n            <div className=\"col-md-12\">{props.children}</div>\n        </div>\n    );\n}\n\nPageRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\n\nPageRow.defaultProps = {\n    className: \"\",\n};\n\nexport default PageRow;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorAddModalContent from \"./ConnectorAddModalContent\";\n\nconst ConnectorAddModal = (props) => (\n    <Modal\n        isOpen={props.isOpen}\n        toggle={props.toggleModal}\n        className=\"settingsItemModal\"\n        size=\"xl\"\n    >\n        <ModalHeader toggle={props.toggleModal}>\n            Add Connector\n        </ModalHeader>\n        <ModalBody>\n            <ConnectorAddModalContent\n                onSchemaSelect={props.onSchemaSelect}\n            />\n        </ModalBody>\n        <ModalFooter>\n            <Button color=\"secondary\" onClick={props.toggleModal}>\n                Close\n            </Button>\n        </ModalFooter>\n    </Modal>\n);\n\nConnectorAddModal.propTypes = {\n    toggleModal: PropTypes.func.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModal;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport ConnectorAddModalItem from \"./ConnectorAddModalItem\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchSchema, settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\n\nconst ConnectorAddModalContent = (props) => {\n    const dispatch = useDispatch();\n    const { isSchemaLoading, isSchemaPopulated, schema } = useSelector(settingsIndexersSelector);\n\n    useEffect(() => {\n        dispatch(fetchSchema());\n    }, [dispatch]);\n\n    if (isSchemaLoading || !isSchemaPopulated) {\n        return <LoadingIndicator />\n    }\n\n    //TODO: Update title from schema\n    return (\n        <>\n            <h2>Usenet</h2>\n            <div className=\"settings-item-list\">\n                {schema\n                    .filter((item) => {\n                        return item.protocol == \"usenet\";\n                    })\n                    .map((item) => (\n                        <ConnectorAddModalItem\n                            key={item.name}\n                            {...item}\n                            onSchemaSelect={props.onSchemaSelect}\n                        />\n                    ))}\n            </div>\n        </>\n    );\n}\n\nConnectorAddModalContent.propTypes = {\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalContent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle } from \"reactstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { selectSchema } from \"@/Store/Slices/Settings/indexers\";\n\nconst ConnectorAddModalItem = (props) => {\n    const dispatch = useDispatch();\n    const { name } = props;\n\n    function selectConnector() {\n        dispatch(selectSchema(props.type));\n        props.onSchemaSelect();\n    }\n\n    return (\n        <Card\n            onClick={selectConnector}\n            className=\"settings-connector-item shadow p-3 m-3\"\n        >\n            <CardTitle>{name}</CardTitle>\n        </Card>\n    );\n}\n\nConnectorAddModalItem.propTypes = {\n    name: PropTypes.string,\n    type: PropTypes.string,\n    onSchemaSelect: PropTypes.func.isRequired,\n};\n\nexport default ConnectorAddModalItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Badge } from \"reactstrap\";\n\nfunction ConnectorBadge(props) {\n    const { text, enabled } = props;\n\n    const color = enabled ? \"success\" : \"danger\";\n\n    if (enabled === undefined) {\n        return null;\n    }\n\n    return <Badge color={color}>{text}</Badge>;\n}\n\nConnectorBadge.propTypes = {\n    text: PropTypes.string.isRequired,\n    enabled: PropTypes.bool,\n};\n\nexport default ConnectorBadge;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport ConnectorEditModalContent from \"./ConnectorEditModalContent\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport { connect } from  \"react-redux\";\nimport { fetchIndexers } from \"@/Store/Slices/Settings/indexers\";\n\nclass ConnectorEditModal extends Component {\n    constructor() {\n        super();\n        this.state = {\n            testSuccess: false,\n        };\n\n        this.formRef = React.createRef();\n        this.onClickTest = this.onClickTest.bind(this);\n        this.onClickSave = this.onClickSave.bind(this);\n        this.onClickDelete = this.onClickDelete.bind(this);\n    }\n\n    prepareData() {\n        let data = this.formRef.current.values;\n        if (this.props.item !== undefined) {\n            data.type = this.props.item.schema.type;\n        } else {\n            data.type = this.props.implementation.type;\n        }\n\n        return data;\n    }\n\n    onClickTest() {\n        this.setState({ testSuccess: false });\n        let data = this.prepareData();\n        axios.post(this.props.url + \"/test\", data).then((response) => {\n            if (response.data.result) {\n                this.setState({ testSuccess: true });\n            }\n        });\n    }\n\n    onClickSave() {\n        let data = this.prepareData();\n        let { url } = this.props;\n        let method = \"post\";\n        const item = this.props.item;\n        if (item) {\n            url += \"/\" + item.id;\n            method = \"put\";\n        }\n\n        axios[method](url, data).then(() => {\n            this.props.toggleModal();\n            this.props.dispatch(fetchIndexers());\n        });\n    }\n\n    onClickDelete() {\n        axios\n            .delete(this.props.url + \"/\" + this.props.item.id)\n            .then(() => {\n                this.props.toggleModal();\n                this.props.dispatch(fetchIndexers());\n            });\n    }\n\n    render() {\n        const { toggleModal, implementation, item } = this.props;\n\n        const name = item\n            ? item.schema.type\n            : implementation\n            ? implementation.type\n            : \"\";\n\n        return (\n            <Modal\n                isOpen={this.props.isOpen}\n                toggle={toggleModal}\n                className=\"itemModal\"\n                size=\"xl\"\n            >\n                <ModalHeader toggle={this.props.toggleModal}>\n                    {\"Edit - \" + name}\n                </ModalHeader>\n                <ModalBody>\n                    <PageRow>\n                        <ConnectorEditModalContent\n                            item={item}\n                            implementation={implementation}\n                            toggleModal={toggleModal}\n                            formRef={this.formRef}\n                        />\n                    </PageRow>\n                </ModalBody>\n                <ModalFooter>\n                    {item ? (\n                        <Button\n                            color=\"danger mr-auto\"\n                            onClick={this.onClickDelete}\n                        >\n                            Delete\n                        </Button>\n                    ) : (\n                        <Button color=\"secondary mr-auto\" onClick={toggleModal}>\n                            Close\n                        </Button>\n                    )}\n\n                    {this.state.testSuccess ? <span>Test Successful</span> : \"\"}\n                    <Button color=\"secondary\" onClick={this.onClickTest}>\n                        Test\n                    </Button>\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Cancel\n                    </Button>\n                    <Button color=\"primary\" onClick={this.onClickSave}>\n                        Save\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n}\n\nConnectorEditModal.propTypes = {\n    url: PropTypes.string,\n    toggleModal: PropTypes.func,\n    isOpen: PropTypes.bool,\n    implementation: PropTypes.object,\n    existingConnector: PropTypes.bool,\n    item: PropTypes.shape({\n        schema: PropTypes.shape({\n            type: PropTypes.string,\n        }),\n        id: PropTypes.number,\n    }),\n    dispatch: PropTypes.func,\n};\n\nexport default connect()(ConnectorEditModal);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FormGroup, Label } from \"reactstrap\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport { settingsIndexersSelector } from \"@/Store/Slices/Settings/indexers\";\n\nconst ConnectorEditModalContent = React.forwardRef((props, formRef) => {\n    const { item } = props;\n    const { schema:allSchema, selectedSchema } = useSelector(settingsIndexersSelector);\n\n    let schema = null;\n    if (item) {\n        schema = item.schema;\n    } else {\n        schema = allSchema.find(item => item.type === selectedSchema )\n    }\n\n    const { fields, initialValues } = schema;\n\n    return (\n        <Formik initialValues={initialValues} innerRef={formRef}>\n            <Form id=\"editForm\" className=\"horizontal-form\">\n                {fields.map((field) => (\n                    <FormGroup className=\"row\" key={field.name}>\n                        <Label className=\"col-sm-3\">{field.label}</Label>\n                        <div className=\"col-sm-5\">\n                            <Field\n                                type={field.type}\n                                name={field.name}\n                                className=\"form-control\"\n                            />\n                            <ErrorMessage name={field.name} />\n                        </div>\n                    </FormGroup>\n                ))}\n            </Form>\n        </Formik>\n    );\n});\n\nConnectorEditModalContent.displayName = \"ConnectorEditModalContent\";\n\nConnectorEditModalContent.propTypes = {\n    implementation: PropTypes.object,\n    item: PropTypes.object,\n    formRef: PropTypes.object.isRequired,\n};\n\nexport default ConnectorEditModalContent;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"reactstrap\";\nimport { Plus } from \"react-feather\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorAddModal from \"./ConnectorAddModal\";\nimport { connect } from \"react-redux\";\nimport { fetchIndexers, deselectSchema } from \"@/Store/Slices/Settings/indexers\";\n\nclass ConnectorEmptyItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            addModal: false,\n        };\n\n        this.toggleAddModal = this.toggleAddModal.bind(this);\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.schemaSelected = this.schemaSelected.bind(this);\n        this.onEditModalClosed = this.onEditModalClosed.bind(this);\n    }\n\n    toggleAddModal() {\n        this.setState({ addModal: !this.state.addModal });\n    }\n\n    toggleEditModal(refresh) {\n        if (refresh) {\n            this.props.dispatch(fetchIndexers());\n        }\n\n        this.setState({ editModal: !this.state.editModal });\n    }\n\n    schemaSelected() {\n        this.setState({addModal: false, editModal: true});\n    }\n\n    onEditModalClosed() {\n        this.setState({ editModal: false });\n        this.props.dispatch(deselectSchema());\n    }\n\n    render() {\n        const { addModal, editModal } = this.state;\n\n        return (\n            <Card\n                onClick={this.toggleAddModal}\n                className=\"settings-connector-item add-item shadow p-3 m-3 text-center\"\n            >\n                <Plus size={60} />\n                <ConnectorAddModal\n                    isOpen={addModal}\n                    toggleModal={this.toggleAddModal}\n                    onSchemaSelect={this.schemaSelected}\n                />\n                <ConnectorEditModal\n                    isOpen={editModal}\n                    toggleModal={this.toggleEditModal}\n                    existingConnector={false}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorEmptyItem.propTypes = {\n    url: PropTypes.string,\n    dispatch: PropTypes.func,\n};\n\nexport default connect()(ConnectorEmptyItem);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, CardTitle, CardText } from \"reactstrap\";\nimport ConnectorEditModal from \"./ConnectorEditModal\";\nimport ConnectorBadge from \"./ConnectorBadge\";\n\nclass ConnectorItem extends Component {\n    constructor() {\n        super();\n        this.state = {\n            modal: false,\n        };\n\n        this.toggleEditModal = this.toggleEditModal.bind(this);\n        this.openEditModal = this.openEditModal.bind(this);\n        this.onEditModalClosed = this.onEditModalClosed.bind(this);\n    }\n\n    toggleEditModal() {\n        this.setState({ modal: !this.state.modal});\n    }\n\n    onEditModalClosed() {\n        this.setState({ modal: false });\n    }\n\n    openEditModal() {\n        this.toggleEditModal();\n    }\n\n    render() {\n        const { modal } = this.state;\n\n        const { name, enableRss, enableSearch, enable } = this.props.item;\n\n        return (\n            <Card\n                onClick={this.openEditModal}\n                className=\"settings-connector-item shadow p-3 m-3\"\n            >\n                <CardTitle>{name}</CardTitle>\n                <CardText className=\"mt-2\">\n                    <ConnectorBadge enabled={enableRss} text=\"RSS\" />\n                    <ConnectorBadge enabled={enableSearch} text=\"Search\" />\n                    <ConnectorBadge enabled={enable} text=\"Enabled\" />\n                </CardText>\n                <ConnectorEditModal\n                    isOpen={modal}\n                    toggleModal={this.toggleEditModal}\n                    item={this.props.item}\n                    url={this.props.url}\n                />\n            </Card>\n        );\n    }\n}\n\nConnectorItem.propTypes = {\n    url: PropTypes.string,\n    item: PropTypes.object.isRequired,\n};\n\nexport default ConnectorItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PageRow from \"@/Components/Page/PageRow\";\nimport ConnectorItem from \"./ConnectorItem\";\nimport ConnectorEmptyItem from \"./ConnectorEmptyItem\";\n\nconst ConnectorList = ({items, url}) => ( \n    <PageRow className=\"settings-connector-list\">\n        {items.map((item) => (\n            <ConnectorItem\n                key={item.id}\n                item={item}\n                url={url}\n            />\n        ))}\n        <ConnectorEmptyItem\n            url={url}\n        />\n    </PageRow>\n)\n\nConnectorList.propTypes = {\n    items: PropTypes.array.isRequired,\n    url: PropTypes.string.isRequired,\n};\n\nexport default ConnectorList;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport PageRow from \"@/Components/Page/PageRow\";\n\nfunction SettingsMenuBar() {\n    const links = [\n        {\n            to: \"/settings/general\",\n            text: \"General\",\n        },\n        {\n            to: \"/settings/indexers\",\n            text: \"Indexers\",\n        },\n        {\n            to: \"/settings/downloaders\",\n            text: \"Download Clients\",\n        },\n    ];\n\n    return (\n        <PageRow className=\"mb-3\">\n            <ul className=\"nav nav-tabs\">\n                {links.map((link, index) => (\n                    <li key={index} className=\"nav-item\">\n                        <NavLink to={link.to} className=\"nav-link\">\n                            {link.text}\n                        </NavLink>\n                    </li>\n                ))}\n            </ul>\n        </PageRow>\n    );\n}\n\nSettingsMenuBar.propTypes = {};\n\nexport default SettingsMenuBar;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"reactstrap\";\n\nclass SettingsToolbar extends Component {\n    constructor() {\n        super();\n        this.saveSettings = this.saveSettings.bind(this);\n    }\n\n    saveSettings(event) {\n        event.preventDefault();\n\n        const { onSavePress } = this.props;\n\n        onSavePress();\n    }\n\n    render() {\n        const { onSavePress } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-1 offset-11\">\n                    <Button onClick={onSavePress}>Save</Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nSettingsToolbar.propTypes = {\n    onSavePress: PropTypes.func.isRequired,\n};\n\nexport default SettingsToolbar;\n"],"sourceRoot":""}