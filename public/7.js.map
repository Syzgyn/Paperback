{"version":3,"sources":["webpack:///./resources/js/Settings/Indexers/IndexerList.js","webpack:///./resources/js/Settings/Indexers/IndexerSettings.js"],"names":["IndexerList","dispatch","useDispatch","useEffect","fetchIndexers","useSelector","settingsIndexersSelector","isLoading","isPopulated","items","IndexerSettings","onSavePress"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,MAAMC,QAAQ,GAAGC,+DAAW,EAA5B;AAEAC,yDAAS,CAAC,YAAM;AACZF,YAAQ,CAACG,qFAAa,EAAd,CAAR;AACH,GAFQ,EAEN,CAACH,QAAD,CAFM,CAAT;;AAHsB,qBAOoBI,+DAAW,CAACC,wFAAD,CAP/B;AAAA,MAOdC,SAPc,gBAOdA,SAPc;AAAA,MAOHC,WAPG,gBAOHA,WAPG;AAAA,MAOUC,KAPV,gBAOUA,KAPV;;AAStB,MAAIF,SAAS,IAAI,CAACC,WAAlB,EAA+B;AAC3B,wBAAO,2DAAC,4EAAD,OAAP;AACH;;AAED,sBAAO,2DAAC,oFAAD;AAAe,SAAK,EAAEC,KAAtB;AAA6B,OAAG,EAAC;AAAjC,IAAP;AACH,CAdD;;AAgBeT,0EAAf,E;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA,IAAMU,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B,WAASC,WAAT,GAAuB,CACnB;AACH;;AAED,sBACI,qIACI,2DAAC,iEAAD,OADJ,eAEI,2DAAC,iEAAD;AAAiB,eAAW,EAAEA;AAA9B,IAFJ,eAGI,kFAHJ,eAII,2DAAC,sEAAD,OAJJ,CADJ;AAQH,CAbD;;AAeeD,8EAAf,E","file":"7.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport LoadingIndicator from \"@/Components/Loading/LoadingIndicator\";\nimport {\n    fetchIndexers,\n    settingsIndexersSelector,\n} from \"@/Store/Slices/Settings/indexers\";\nimport ConnectorList from '@/Components/SettingsConnectors/ConnectorList';\n\nconst IndexerList = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchIndexers());\n    }, [dispatch]);\n\n    const { isLoading, isPopulated, items } = useSelector(settingsIndexersSelector);\n\n    if (isLoading || !isPopulated) {\n        return <LoadingIndicator />;\n    }\n    \n    return <ConnectorList items={items} url=\"/api/indexer\" />\n}\n\nexport default IndexerList;\n","import React from \"react\";\nimport SettingsMenuBar from \"@/Settings/SettingsMenuBar\";\nimport SettingsToolbar from \"@/Settings/SettingsToolbar\";\nimport IndexerList from \"@/Settings/Indexers/IndexerList\";\n\nconst IndexerSettings = () => {\n    function onSavePress() {\n        //TODO: General indexers settings\n    }\n\n    return (\n        <>\n            <SettingsMenuBar />\n            <SettingsToolbar onSavePress={onSavePress} />\n            <h2>Indexers</h2>\n            <IndexerList />\n        </>\n    );\n}\n\nexport default IndexerSettings;\n"],"sourceRoot":""}